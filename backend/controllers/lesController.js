import db from "../db/connectdb.js";
import createAnswer from "./createAnsver.js"; // –∑–∞–ª–∏—à–∏–≤ —Ç–≤–æ—é –Ω–∞–∑–≤—É, –∞–ª–µ –∫—Ä–∞—â–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª
import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";

dotenv.config();

// ‚ö†Ô∏è –¢–æ–∫–µ–Ω —ñ —á–∞—Ç-–∞–π–¥—ñ –±–µ—Ä–µ–º–æ –∑ .env
const TOKEN = process.env.TELEGRAM_TOKEN;
const CHAT_ID = parseInt(process.env.TELEGRAM_CHAT_ID, 10);

if (!TOKEN || !CHAT_ID) {
    throw new Error("–ù–µ –≤–∫–∞–∑–∞–Ω—ñ TELEGRAM_TOKEN –∞–±–æ TELEGRAM_CHAT_ID —É .env");
}

const bot = new TelegramBot(TOKEN, { polling: false });

// -------- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≥—Ä—É–ø—ñ --------
const validUser = async (user_id) => {
    try {
        const id = Number(user_id);
        if (!Number.isInteger(id)) {
            console.error("searchUser: user_id –Ω–µ —á–∏—Å–ª–æ:", user_id);
            return false;
        }
        const member = await bot.getChatMember(CHAT_ID, id);
        return !(member.status === "left" || member.status === "kicked");
    } catch (err) {
        console.error("Telegram API error:", err.response?.body || err.message || err);
        return false;
    }
};

// -------- GET LESSON --------
export const get_lesson = async (req, res) => {
    try {
        const user_id = Number(req.body.user_id);
        const link_id = req.body.link_id;

        if (!Number.isInteger(user_id) || !link_id) {
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π link_id" });
        }

        const isValid = await validUser(user_id);
        if (!isValid) {
            return res.status(404).json({ message: "User not found or not in group" });
        }

        const lesson = await createAnswer(link_id);
        if (!lesson) {
            return res.status(404).json({ message: "Lesson not found" });
        }

        // –Ø–∫—â–æ files —Ä—è–¥–æ–∫ ‚Üí –ø–∞—Ä—Å–∏–º–æ
        if (typeof lesson.files === "string") {
            try {
                lesson.files = JSON.parse(lesson.files);
            } catch {
                lesson.files = [];
            }
        }

        return res.status(200).json({ lesson });
    } catch (err) {
        console.error("get_lesson error:", err);
        return res.status(500).json({ message: "Server error" });
    }
};

// -------- CREATE LESSON --------
export const create_lesson = async (req, res) => {
    const { link_id, title, description, files } = req.body;

    if (!link_id || !title || !description) {
        return res.status(400).json({ message: "link_id, title —Ç–∞ description –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
    }

    try {
        const existingLesson = await createAnswer(link_id);
        if (existingLesson) {
            return res.status(409).json({ message: "Lesson with this link_id already exists" });
        }

        const filesJson = JSON.stringify(Array.isArray(files) ? files : []);

        const sql = "INSERT INTO lessons (link_id, title, description, files) VALUES (?, ?, ?, ?)";
        await new Promise((resolve, reject) => {
            db.run(sql, [link_id, title, description, filesJson], function (err) {
                if (err) reject(err);
                else resolve(this.lastID);
            });
        });

        return res.status(201).json({ message: "Lesson created successfully" });
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É:", err);
        return res.status(500).json({ message: "Server error" });
    }
};

// -------- EDIT LESSON --------
export const edit_lesson = async (req, res) => {
    const lessons = req.body;

    if (!Array.isArray(lessons) || lessons.length === 0) {
        return res.status(400).json({ message: "–ú–∞—Å–∏–≤ —É—Ä–æ–∫—ñ–≤ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π" });
    }

    try {
        // –ü–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        await new Promise((resolve, reject) => {
            db.run("BEGIN TRANSACTION", (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ä—ñ —É—Ä–æ–∫–∏
        await new Promise((resolve, reject) => {
            db.run("DELETE FROM lessons", (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        // –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤—ñ —É—Ä–æ–∫–∏ –±–µ–∑ id (–∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è)
        const insertSql = `
            INSERT INTO lessons (day, tittle, files, link_id)
            VALUES (?, ?, ?, ?)
        `;

        for (const lesson of lessons) {
            const { day, tittle, files, link_id } = lesson;

            if (!link_id || !tittle) continue;

            const filesJson = JSON.stringify(Array.isArray(files) ? files : []);

            await new Promise((resolve, reject) => {
                db.run(insertSql, [day || null, tittle, filesJson, link_id], function(err) {
                    if (err) reject(err);
                    else resolve(this.lastID); // –ø–æ–≤–µ—Ä—Ç–∞—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π id
                });
            });
        }

        // –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        await new Promise((resolve, reject) => {
            db.run("COMMIT", (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        return res.status(200).json({ message: "–£—Ä–æ–∫–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω–µ–Ω–æ –∑ –∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é id" });
    } catch (err) {
        // rollback —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        await new Promise((resolve) => {
            db.run("ROLLBACK", () => resolve());
        });

        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–º—ñ–Ω–∏ —É—Ä–æ–∫—ñ–≤:", err);
        return res.status(500).json({ message: "Server error" });
    }
};

// -------- DELETE LESSON --------
export const delete_lesson = async (req, res) => {
    const { link_id } = req.body; // üîÑ –∑–º—ñ–Ω–∏–≤ –Ω–∞ body –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ

    if (!link_id) {
        return res.status(400).json({ message: "link_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π" });
    }

    try {
        const existingLesson = await createAnswer(link_id);
        if (!existingLesson) {
            return res.status(404).json({ message: "Lesson with this link_id not found" });
        }

        const sql = "DELETE FROM lessons WHERE link_id = ?";
        await new Promise((resolve, reject) => {
            db.run(sql, [link_id], function (err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });

        return res.status(200).json({ message: "Lesson deleted successfully" });
    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É—Ä–æ–∫—É:", err);
        return res.status(500).json({ message: "Server error" });
    }
};
